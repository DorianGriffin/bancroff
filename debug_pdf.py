#!/usr/bin/env python
"""
Debug script to test PDF generation directly.
Run this inside the Docker container:
python debug_pdf.py
"""
import os
import subprocess
import shutil
from datetime import datetime

def debug_pdf_generation():
    """Test PDF generation process."""
    print("Starting PDF debug test...")
    
    # Get application directories
    app_root = os.path.dirname(os.path.abspath(__file__))
    pdf_dir = os.path.join(app_root, "pdf")
    uploads_dir = os.path.join(app_root, "uploads")
    
    # Create required directories if they don't exist
    os.makedirs(pdf_dir, exist_ok=True)
    os.makedirs(uploads_dir, exist_ok=True)
    
    # Ensure default_signature.png exists in uploads
    default_sig = os.path.join(uploads_dir, "default_signature.png")
    if not os.path.exists(default_sig):
        print(f"Creating placeholder signature at {default_sig}")
        with open(default_sig, 'w') as f:
            f.write("Placeholder for signature")
    
    # Create a test LaTeX file
    tex_content = r"""
\documentclass{article}
\usepackage{graphicx}
\usepackage[margin=1in]{geometry}

\begin{document}
\section*{Test PDF Generation}

\noindent \textbf{Generated by:} \\
Test Script \\[10pt]

\noindent \textbf{Debug Note:} \\
This is a test generation at %s \\[10pt]

\noindent \textbf{Environment:} \\
Working Directory: %s \\
PDF Directory: %s \\
Uploads Directory: %s \\[10pt]

\end{document}
""" % (
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        os.getcwd(),
        pdf_dir,
        uploads_dir
    )
    
    # Write the test LaTeX file
    test_tex_path = os.path.join(pdf_dir, "test_debug.tex")
    print(f"Writing test LaTeX file to {test_tex_path}")
    with open(test_tex_path, 'w') as f:
        f.write(tex_content)
    
    # Try to compile with pdflatex
    print("Attempting to run pdflatex...")
    try:
        result = subprocess.run(
            ["pdflatex", "-interaction=nonstopmode", test_tex_path],
            cwd=pdf_dir,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("PDF generation successful!")
            pdf_path = os.path.join(pdf_dir, "test_debug.pdf")
            if os.path.exists(pdf_path):
                print(f"PDF file created at: {pdf_path}")
                # Try to copy it to a standard location for easier access
                shutil.copy(pdf_path, os.path.join(app_root, "test_debug.pdf"))
                print(f"PDF copied to {os.path.join(app_root, 'test_debug.pdf')}")
            else:
                print("Expected PDF file not found!")
        else:
            print(f"PDF generation failed with return code: {result.returncode}")
            print("\nSTDOUT:")
            print(result.stdout)
            print("\nSTDERR:")
            print(result.stderr)
    except Exception as e:
        print(f"Error running pdflatex: {e}")
    
    print("\nListing files in pdf directory:")
    for item in os.listdir(pdf_dir):
        item_path = os.path.join(pdf_dir, item)
        size = os.path.getsize(item_path) if os.path.isfile(item_path) else "DIR"
        print(f"  {item} - {size} bytes")

if __name__ == "__main__":
    debug_pdf_generation() 